
package cy.ac.ucy.pmpeis01.client.android.SmartLib;





import java.text.SimpleDateFormat;
import java.util.List;

import android.content.Context;
import android.graphics.Color;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import cy.ac.ucy.pmpeis01.client.android.R;
import cy.ac.ucy.pmpeis01.client.android.ImageLoader.ImageLoader;





/**
 * @author paschalis
 * 
 *         Our customized adapter, to show the data to the opponent's row, as WE
 *         like!
 * 
 *         Binds usergame & timestamp to the appropriate TextView in the
 *         opponent's row
 * 
 */
public class BookInfoAdapter extends ArrayAdapter<Book> {

	int		resource;

	String	response;

	Context	context;

	App		app;





	// Initialize adapter
	public BookInfoAdapter(Context context, int resource, List<Book> items) {
		super(context, resource, items);
		this.resource = resource;


	}





	@Override
	public View getView(int position, View convertView, ViewGroup parent) {

		LinearLayout booksInfoView;

		// Get the current alert object
		Book bookInfo = getItem(position);

		// Inflate the view
		if (convertView == null){
			booksInfoView = new LinearLayout(getContext());
			String inflater = Context.LAYOUT_INFLATER_SERVICE;
			LayoutInflater vi;
			vi = (LayoutInflater) getContext().getSystemService(inflater);
			vi.inflate(resource, booksInfoView, true);
		}
		else{
			booksInfoView = (LinearLayout) convertView;
		}

		
		
		// Get layout's Data
		TextView bookISBN = (TextView) booksInfoView
				.findViewById(R.id.textViewBookISBN);
		
		TextView bookTitle = (TextView) booksInfoView
				.findViewById(R.id.textViewBookTitle);
		TextView bookAuthors = (TextView) booksInfoView
				.findViewById(R.id.textViewBookAuthors);
		TextView bookPublishedYear = (TextView) booksInfoView
				.findViewById(R.id.textViewBookPublishedYear);
		TextView bookPageCount = (TextView) booksInfoView
				.findViewById(R.id.textViewBookPageCount);
		TextView bookDateOfInsert = (TextView) booksInfoView
				.findViewById(R.id.textViewBookDateOfInsert);

		ImageView bookCoverImage = (ImageView) booksInfoView
				.findViewById(R.id.imageViewBookCover);

		TextView bookLanguage = (TextView) booksInfoView
				.findViewById(R.id.textViewBookLanguage);
		
		TextView bookStatusMsg = (TextView) booksInfoView
				.findViewById(R.id.textViewBookStatusMessage);

		// show The Image and save it to Library
		App.imageLoader.DisplayImage(bookInfo.imgURL, bookCoverImage);



		// Assign the appropriate data from our alert object above
		bookISBN.setText(bookInfo.isbn);
		bookTitle.setText(bookInfo.title);
		bookAuthors.setText(bookInfo.authors);
		bookPublishedYear.setText(Integer.valueOf(bookInfo.publishedYear)
				.toString());
		bookPageCount.setText(Integer.valueOf(bookInfo.pageCount).toString());
		bookDateOfInsert
				.setText(makeTimeStampHumanReadble(bookInfo.dateOfInsert));
		bookLanguage.setText(bookInfo.lang);
		
		setBookStatusMessage(bookInfo.status,bookStatusMsg);

		return booksInfoView;
		
		

		
		
	}
	
	
	/**Returns a string according to book status
	 * @param status
	 */
	private void setBookStatusMessage(int status, TextView tv) {
		switch (status) {
			case App.BOOK_STATE_USER_RENTED:
				tv.setText(R.string.rented);
				tv.setTextColor(Color.parseColor("#04B306"));
				tv.setVisibility(View.VISIBLE);
				break;
				
			case App.BOOK_STATE_USER_AVAILABLE:
				tv.setVisibility(View.INVISIBLE);
				break;
			case App.BOOK_STATE_USER_NO_RENTAL:
				tv.setText(R.string.dontLent);
				tv.setTextColor(Color.parseColor("#C2022C"));
				tv.setVisibility(View.VISIBLE);
				break;
			case App.BOOK_STATE_USER_OTHER:
				tv.setText(R.string.otherDontLent);
				tv.setTextColor(Color.parseColor("#C2022C"));
				tv.setVisibility(View.VISIBLE);
				break;
			case App.BOOK_STATE_USER_DONT_OWNS:
				tv.setText(R.string.dontOwn);
				tv.setTextColor(Color.parseColor("#C2022C"));
				tv.setVisibility(View.VISIBLE);
				break;
			default:
				tv.setVisibility(View.INVISIBLE);
				break;

		}

	}




	/**
	 * CHECK
	 * 
	 * @param pTimestamp
	 * @return
	 */
	public static String makeTimeStampHumanReadble(String pTimestamp) {

		try{
			
			SimpleDateFormat datetimeFormatter1 = new SimpleDateFormat(
		                "yyyy-MM-dd HH:mm:ss");
		java.util.Date lFromDate1 = datetimeFormatter1.parse(pTimestamp);
		
	
	//	Timestamp fromTS1 = new Timestamp(lFromDate1.getTime());
		
			
			
			// CHECK TIMESTAMP: (new Long(pTimestamp) * 1000)
			//Long time = (new Long(pTimestamp));

			CharSequence humansTime = DateUtils
					.getRelativeTimeSpanString(lFromDate1.getTime());

			return humansTime.toString();
		}

		catch (Exception e){
			return pTimestamp;
		}

	}




}
