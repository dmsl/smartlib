/*

	Author: Paschalis Mpeis

	Affiliation:
	Data Management Systems Laboratory 
	Dept. of Computer Science 
	University of Cyprus 
	P.O. Box 20537 
	1678 Nicosia, CYPRUS 
	Web: http://dmsl.cs.ucy.ac.cy/
	Email: dmsl@cs.ucy.ac.cy
	Tel: +357-22-892755
	Fax: +357-22-892701

*/

package cy.ac.ucy.pmpeis01.client.android.SmartLib;



import java.security.Timestamp;
import java.util.ArrayList;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.actionbarsherlock.app.SherlockActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;

import cy.ac.ucy.pmpeis01.client.android.CaptureActivity;
import cy.ac.ucy.pmpeis01.client.android.PreferencesActivity;
import cy.ac.ucy.pmpeis01.client.android.R;





public class MyBooksActivity extends SherlockActivity {

	private static final String	TAG			= MyBooksActivity.class
												.getSimpleName();

	App						app;

	ArrayList<Book>			arralArrayListUserBooks;

	ListView					listViewMyBooks;

	TextView					textViewMyBooksTitle;

	AdapterBookInfo			bookInfoAdapter;

	LinearLayout				linearLayoutSelectedBooks;

	TextView					textViewMyBookSelected;

	Boolean					isItemChecked	= false;





	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		app = (App) getApplication();
		setContentView(R.layout.activity_my_books);

		isItemChecked = false;

		app.selectedBook = null;




		listViewMyBooks = (ListView) findViewById(R.id.listViewBooksOfUser);



		textViewMyBooksTitle = (TextView) findViewById(R.id.textViewMyBooksTitle);

		linearLayoutSelectedBooks = (LinearLayout) findViewById(R.id.linearLayoutSelectedBooks);

		textViewMyBooksTitle.setText(app.user.name + " Books (?)");


		arralArrayListUserBooks = new ArrayList<Book>();

		textViewMyBookSelected = (TextView) findViewById(R.id.textViewMyBooksSelectedBook);




		getSupportActionBar().setDisplayHomeAsUpEnabled(true);


		// Get user books
		new AsyncTaskGetMyBooks().execute();





		listViewMyBooks.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int pos,
					long arg3) {
				app.selectedBook = (Book) (listViewMyBooks
						.getItemAtPosition(pos));

				listViewMyBooks
						.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
				listViewMyBooks.setItemChecked(pos, true);

				isItemChecked = true;

				// REcreate the menu
				invalidateOptionsMenu();

				// linearLayoutSelectedBooks.setVisibility(View.VISIBLE);
				//
				// textViewMyBookSelected.setText(selectedBook.title);


			}
		});







	}







	@Override
	protected void onResume() {
		super.onResume();

		linearLayoutSelectedBooks.setVisibility(View.GONE);

		isItemChecked = false;

		app.selectedBook = null;

		// Recreate the menu
		invalidateOptionsMenu();
	}







	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		menu.add(Menu.NONE, App.MENU_GLOBAL_SETTINGS, Menu.NONE,
				R.string.menu_settings)
				.setIcon(R.drawable.ic_menu_settings_holo_light)
				.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);

		menu.add(Menu.NONE, App.MENU_MY_BOOKS_BOOK_SELECTED, Menu.FIRST,
				R.string.editBook)
				.setVisible(false)
				.setShowAsAction(
						MenuItem.SHOW_AS_ACTION_IF_ROOM
								| MenuItem.SHOW_AS_ACTION_WITH_TEXT);

		
		menu.add(Menu.NONE, App.MENU_LIBRARY_SETTINGS, Menu.NONE,
				app.library.name)
				.setIcon(R.drawable.ic_menu_account_list)
				.setShowAsActionFlags(
						MenuItem.SHOW_AS_ACTION_WITH_TEXT);
		return true;
	}





	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
			case android.R.id.home:
				NavUtils.navigateUpFromSameTask(this);
				return true;
			case App.MENU_LIBRARY_SETTINGS:{
				Intent myIntent = new Intent(MyBooksActivity.this,
				 LibPreferences.class);
				MyBooksActivity.this.startActivity(myIntent);

			}
			return true;
			case App.MENU_GLOBAL_SETTINGS:{
				Intent myIntent = new Intent(MyBooksActivity.this,
						PreferencesActivity.class);
				MyBooksActivity.this.startActivity(myIntent);

			}
				return true;

			case App.MENU_MY_BOOKS_BOOK_SELECTED:{
				Intent intent = new Intent(MyBooksActivity.this,
						EditBookActivity.class);

				startActivity(intent);

			}
				return true;


		}
		return super.onOptionsItemSelected(item);
	}





	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {

		// If library is selected, show register option
		if (isItemChecked){
			menu.findItem(App.MENU_MY_BOOKS_BOOK_SELECTED)
					.setVisible(true)
					.setTitle(getString(R.string.edit) + ": "
							+ app.selectedBook.title);
		}
		else{
			menu.findItem(App.MENU_MY_BOOKS_BOOK_SELECTED).setVisible(false);

		}


		return true;
	}







	/**
	 * Get User's Books
	 * 
	 * @author paschalis
	 * 
	 */
	private class AsyncTaskGetMyBooks extends
			AsyncTask<Void, Integer, JSONArray> {


		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			// progressBarLentButton.setVisibility(View.VISIBLE);
			// buttonLentBook.setVisibility(View.INVISIBLE);
			// buttonLentBook.setEnabled(false);

		}





		@Override
		protected JSONArray doInBackground(Void... v) {

			JSONArray result = null;

			// int returnResult = App.GENERAL_NO_INTERNET;


			ArrayList<NameValuePair> parameters = new ArrayList<NameValuePair>();
			// Say that we are mobile (Android Device)
			parameters.add(new BasicNameValuePair("device",
					App.DEVICE_ANDROID));

			// Set Username
			parameters.add(new BasicNameValuePair("username", app
					.getUsername()));

			// Execute PHP Script
			String resultStr = App.executePHPScript(
					app.getLibrary_getUserBooks_URL(), parameters);

			// Parse Result (JSON Obj)
			if (resultStr != null){
				try{
					// Create JSON Obj based on the result!
					result = new JSONArray(resultStr);

				}
				catch (JSONException e){
					Log.e(TAG, "Error parsing data " + e.toString());


				}


			}


			return result;

		}





		@Override
		protected void onPostExecute(JSONArray result) {

			int returnFromJson = App.GENERAL_NO_INTERNET;

			try{
				returnFromJson = result.getJSONObject(0).getInt("result");

			}
			catch (Exception e1){
				returnFromJson = App.BOOKS_OF_USER_NO_BOOKS;
			}

			switch (returnFromJson) {
				case App.GENERAL_SUCCESSFULL:
					// Save all books to array

					try{
						app.user.totalBooks = result.getJSONObject(0)
								.getInt("booksNum");

						textViewMyBooksTitle.setText(app.user.name
								+ " Books (" + app.user.totalBooks
								+ ")");
					}
					catch (Exception e){

					}



					for (int i = 1; i < result.length(); i++){

						try{

							JSONObject row;

							Book book = new Book();

							row = result.getJSONObject(i);

							String isbn = row.getString("isbn");
							String title = row.getString("title");
							String authors = row.getString("authors");
							int publishedYear = row
									.getInt("publishedYear");
							int pageCount = row.getInt("pageCount");

							String dateOfInsert = row
									.getString("dateOfInsert");
							String imgURL = row.getString("imgURL");
							String lang = row.getString("lang");
							int bookStatus = row.getInt("status");

							book.isbn = isbn;
							book.title = title;
							book.authors = authors;
							book.publishedYear = publishedYear;
							book.pageCount = pageCount;
							book.dateOfInsert = dateOfInsert;
							book.imgURL = imgURL;
							book.lang = lang;
							book.status = bookStatus;


							// Insert book to array
							arralArrayListUserBooks.add(book);
						}
						catch (JSONException e){
						}



					}



					bookInfoAdapter = new AdapterBookInfo(
							MyBooksActivity.this, R.layout.book_item,
							arralArrayListUserBooks,false);

					// Show list
					listViewMyBooks.setAdapter(bookInfoAdapter);

					break;
				case App.GENERAL_NO_INTERNET:
					// TODO refresh button, and call again asynctask from
					// refresh button
					break;
				case App.BOOKS_OF_USER_NO_BOOKS:

					Toast.makeText(MyBooksActivity.this,
							R.string.msgYouHaveNoBooksSoFar,
							Toast.LENGTH_LONG).show();

					Handler handler = new Handler();
					handler.postDelayed(new Runnable() {

						@Override
						public void run() {
							MyBooksActivity.this.finish();
						}
					}, App.DELAY_TWO_SEC);


					break;

				case App.GENERAL_WEIRD_ERROR:
					Toast.makeText(MyBooksActivity.this,
							R.string.reportThisToDev,
							Toast.LENGTH_LONG).show();
					MyBooksActivity.this.finish();
					break;
				case App.GENERAL_DATABASE_ERROR:
					Toast.makeText(MyBooksActivity.this,
							R.string.reportThisToDev,
							Toast.LENGTH_LONG).show();
					MyBooksActivity.this.finish();
					break;
				default:
					break;
			}










		}
	}

}
